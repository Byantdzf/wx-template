<template>
    <template name="msgItem">
      <view wx:for="{{contents}}" style="display:inline-block;white-space:pre-line" wx:key="*this">
        <text wx:if="item.type=='text'" style="padding:8rpx;margin:0;width:auto;" selectable>{{item.text}}</text>
      </view>
    </template>
    <scroll-view scroll-y="true" style="height:{{scrollHeight}}rpx;background:#eee;"   scroll-into-view="{{toView}}" >
      <view class="text-center font_28 white">
        <view class="weui-loading" style="display: block;margin: auto;" wx-if="{{showload}}"></view>
        <view style="background: #DADADA;display: inline-block;padding: 6rpx 12rpx;border-radius: 6rpx;margin-top: 22px"  @tap="History">{{text}}</view>
      </view>
      <view id="j_page" >
        <view wx:for="{{messages}}" wx:for-item="i" wx:key="*this">
          <view id="{{i.id}}" class="padding clearfix" wx:if="{{i.me}}">
            <image class="right-Avatar padding_half" src="{{i.avatar}}"></image>
            <view class="right-Triangle"></view>
            <view class="right-message padding_half" wx:if="{{!i.speech}}">
              <template is="msgItem" data="{{...i}}" />
            </view>
          </view>
          <view id="{{i.id}}" class="padding clearfix" wx:if="{{!i.me}}">
            <image class="left-Avatar padding_half" src="{{i.avatar}}"></image>
            <view class="left-Triangle"></view>
            <view class="left-message padding_half" wx:if="{{!i.speech}}">
              <template is="msgItem" data="{{...i}}" />
            </view>
          </view>
        </view>
        <view class="weui-icon_success"></view>
      </view>
    </scroll-view>
    <view class="wa-row" style="height:100rpx;background: white;position: fixed;bottom: 0;">
      <!--<image src="{{changeImageUrl}}" class="text-center icon ion-ios" style="height:32px;line-height:32px" @tap="changeType"></image>-->
      <view wx:if="{{!isSpeech}}" class="padding_half" style="flex:1; height:60rpx; line-height:60rpx;border-bottom:1px solid gray;">
        <input value="{{msg}}" @input="sendMessage" @enter="sendMessage"/>
      </view>
      <button type="" disabled="{{isSpeech||msg==''}}" size='mini' class="send-button" bindtap="send">发送</button>
    </view>
</template>

<script>
  import wepy from 'wepy'
  import { service } from '../../config.js'
  import http from '../../mixins/http'
  import base from '../../mixins/base'
  import user from '../../mixins/user'
//  import util from '../../utils/util'
  import ShareMessage from '../../mixins/ShareMessage'
  var util = require('../../utils/util')

  export default class chitchat extends wepy.page {
    mixins = [base, http, user, ShareMessage]
    config = {
      navigationBarTitleText: '聊天',
      enablePullDownRefresh: true
    }
    data = {
      other_userId: '',
      other_name: '',
      messages: [],
      isSpeech: false,
      scrollHeight: 0,
      toView: '',
      windowHeight: 0,
      windowWidth: 0,
      pxToRpx: 2,
      msg: '',
      emotionBox: false,
      emotions: [],
      showload: false,
      speechText: '按住 说话',
      text: '查看历史记录',
      changeImageUrl: '/images/voice.png',
      speechIcon: '/images/speech0.png',
      defaultSpeechIcon: '/images/speech0.png',
      emotionIcon: '/images/emotion.png',
      playingSpeech: '',
      min_id: 0,
      page: 1
    }

    computed = {
    }

    onShareAppMessage(res) {
      return this.$parent.onShareAppMessage(this.config.navigationBarTitleText)
    }
    async onLoad(e) {
      let that = this
      that.other_userId = e.id
      that.name = e.name
      console.log(e)
      console.log(that.other_userId)
      wx.setNavigationBarTitle({
        title: that.name,
        success: function (res) {
        }
      })
      wx.getSystemInfo({
        success: (res) => {
          that.windowHeight = res.windowHeight
          that.pxToRpx = 750 / res.screenWidth
          that.scrollHeight = (res.windowHeight - 50) * 750 / res.screenWidth
        }
      })
    }
    onShow() {
      let that = this
      that.getData()
      setInterval(function () {
        that.refreshMessage()
      }, 3000)
      that.$parent.getTracker(this.$root.$name, this.config.navigationBarTitleText)
    }

    onPullDownRefresh() {
      this.getData()
    }

    pageScrollToBottom () {
      setTimeout(()=>{
        var query = wx.createSelectorQuery()
        query.select('#j_page').boundingClientRect()
        query.selectViewport().scrollOffset()
        query.exec(function(res){
          console.log(res)
          res[0].top       // #the-id节点的上边界坐标
          res[1].scrollTop // 显示区域的竖直滚动位置
        })
      },1500)
    }
    getData() {
      let that = this
      let data = {
        min_id: that.min_id
      }
      this.$get({url: service.chitchat_get + that.other_userId, data}, {
        success: ({code, data}) => {
          that.text = '点击加载更多'
          let message = []
          if (data.length == 0) {
            return that.text = '暂无消息'
          }
          that.min_id = data[data.length - 1].id
          that.max_id = data[0].id
          console.log(that.max_id)
          data.forEach((item, index, arr)=>{
            message = {
              id: arr[index].id,
              contents: util.getContents(arr[index].content),
              me: arr[index].is_mine == 1 ? true : false,
              avatar: arr[index].avatar,
              speech: false,
              time: '昨天 7:30'
            }
            that.messages.unshift(message)
          })
          that.showload = false
        }
      })
    }

    refreshMessage () {
      var that = this
      this.$get({url: service.refreshMessage + that.other_userId, data: {max_id: that.max_id}}, {
        success: ({code, data}) => {
          if (data.length == 0) {return}
          that.max_id = data[0].id
          console.log('刷新成功')
          console.log(data)
          let message = {}
          data.forEach((item, index, arr) => {
            console.log(arr[index].id)
            message = {
              id: 'id_' + Date.parse(new Date()) / 1000,
              contents: util.getContents(arr[index].content),
              me: arr[index].is_mine == 1 ? true : false,
              avatar: arr[index].avatar,
              speech: false,
              time: '昨天 7:30'
            }
            that.messages.push(message)
            that.msg = ''
            that.toView = 'id_' + Date.parse(new Date()) / 1000
          })
          console.log(message)
        }
      })
    }
    methods = {
      History () {
        this.showload = true
        let that = this
        let data = {
          min_id: that.min_id
        }
        this.$get({url: service.chitchat_get + that.other_userId, data}, {
          success: ({code, data}) => {
            if (data.length == 0) {
              return that.text = '到顶了'
            }
            console.log(data.data)
            that.min_id = data[data.length - 1].id
            let message = []
            data.forEach((item, index, arr)=>{
              message = {
                id: arr[index].id,
                contents: util.getContents(arr[index].content),
                me: arr[index].is_mine == 1 ? true : false,
                avatar: arr[index].avatar,
                speech: false,
                time: '昨天 7:30'
              }
              that.messages.unshift(message)
            })
          },
          fail: ({code, data}) => {
          },
          complete: () => {
            that.showload = false
          }
        })
      },
      scroll(e) {
        this.getData()
      },
      sendMessage(e) {
        this.msg = e.detail.value
        console.log(this.msg)
      },
      send() {
        var that = this
        let msg = this.msg
        this.$post({ url: service.chitchat_post + that.other_userId, data: {content: msg, max_id: that.max_id} }, {
          success: ({code, data}) => {
            that.max_id = data[0].id
            console.log('发送成功')
            console.log(data)
            let message = {}
            data.forEach((item, index, arr) => {
              console.log(arr[index].id)
              message = {
                id: 'id_' + Date.parse(new Date()) / 1000,
                contents: util.getContents(arr[index].content),
                me: arr[index].is_mine == 1 ? true : false,
                avatar: arr[index].avatar,
                speech: false,
                time: '昨天 7:30'
              }
              that.messages.push(message)
              that.msg = ''
              that.toView = 'id_' + Date.parse(new Date()) / 1000
            })
            console.log(message)
          }
        })
      }
    }
  }

</script>

<style lang="less">
  /*@import "../../styles/weui/base/fn.wxss";*/
  @import "../../styles/custom/wa-ui.less";
  page text {
    /*font-size: 14px;*/
    line-height: 20px;
    /*font-family: "Helvetica Neue", Helvetica, 'microsoft yahei ui', 'microsoft yahei', 'simhei', Arial, sans-serif*/
  }

  page view {
    /*font-size: 14px;*/
    line-height: 20px;
    font-family: "Helvetica Neue", Helvetica, 'microsoft yahei ui', 'microsoft yahei', 'simhei', Arial, sans-serif
  }
  .right-Avatar {
    float: right;
    width: 85rpx;
    height: 85rpx;
  }

  .right-Triangle {
    float: right;
    margin-top: 35rpx;
    width: 0;
    height: 0;
    border-top: 16rpx solid transparent;
    border-left: 24rpx solid yellowgreen;
    border-bottom: 16rpx solid transparent;
  }

  .right-message {
    float: right;
    margin-top: 10rpx;
    line-height: 65rpx;
    background: yellowgreen;
    border-radius: 10rpx;
    font-size: 32rpx;
  }

  .right-speech-message {
    float: right;
    margin-top: 10rpx;
    line-height: 65rpx;
    background: yellowgreen;
    border-radius: 10rpx;
    font-size: 32rpx;
    width: 150rpx;
  }

  .left-speech-message {
    float: left;
    margin-top: 10rpx;
    line-height: 65rpx;
    background: yellowgreen;
    border-radius: 10rpx;
    font-size: 32rpx;
    width: 150rpx;
  }

  .left-Avatar {
    float: left;
    width: 85rpx;
    height: 85rpx;
  }

  .left-Triangle {
    float: left;
    margin-top: 35rpx;
    width: 0;
    height: 0;
    border-top: 16rpx solid transparent;
    /*border-right: 24rpx solid yellowgreen;*/
    border-right: 24rpx solid white;
    border-bottom: 16rpx solid transparent;
  }

  .left-message {
    float: left;
    margin-top: 10rpx;
    line-height: 65rpx;
    /*background: yellowgreen;*/
    background: white;
    border-radius: 10rpx;
    font-size: 32rpx;
  }

  .speech-button {
    height: 70rpx;
    margin-left: 30rpx;
    margin-right: 30rpx;
    line-height: 70rpx;
    background: white;
  }

  .button-hover {
    background-color: rgba(0, 0, 0, 0.1);
    opacity: 0.7;
  }

  .icon {
    vertical-align: middle;
    margin-top: 8rpx;
    width: 64rpx;
    height: 64rpx;
  }

  .ion-ios {
    background-size: 64rpx 64rpx;
    background-repeat: no-repeat;
    background-position: center center;
    vertical-align: middle;
  }

  .emotion {
    width: 64rpx;
    height: 64rpx;
    line-height: 64rpx;
    margin: 10rpx;
  }

  #emotionPanel {
    padding-left: 40rpx;
  }

  .send-button {
    margin-left: 10rpx;
    margin-top: 8rpx;
    height: 64rpx;
    line-height: 64rpx;
    color: white;
    background: #1AAD19 !important;
  }

</style>
